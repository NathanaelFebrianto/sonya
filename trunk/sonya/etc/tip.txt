

Q1. java.lang.IllegalArgumentException: argument type mismatch

	Answer --> I just had to delete the ajax4jsf lib in web-inf/lib, because the same classes are in richfaces.

	Source --> http://forum.java.sun.com/thread.jspa?threadID=5264691&messageID=10103535 
	
Q2. JSF, XHTML에서 c:url 사용시 문제점
	<a href="<c:url value="/?locale=ko"/>">#{text['korean']}</a>
	사용시 <a>태그가 안닫히는 것으로 인식함.
	
	Answer --> <h:outputLink value="?locale=en">#{text['english']}</h:outputLink>
	
	Struggling with JSF and... a link! Posted on Monday November 14, 2005 
	I finally got one step further with my investigation on JSF: Facelets!
	It's the best thing I found to solve my layout'ing problems... And get nice EL support on top!
	I'm currently "trying" to code a simple storefront web-application using JSF for a customer of ours. And in order to evaluate the technology, I set my self a real simple goal consisting of two pages: one listing all featured brands; and a second listing all products currently available for one brand. As you can imagine, following a link on the first page, leads to the second one!
	And I'm currently encountering a few problems with that first page already! Since this is to be a public webapp, it'll be nice if those two pages meet the following requirements:
	People not using cookies could use this webapp, not loosing the session on every single request 
	Search engines could index it 
	So, here comes the issue of my previous post again: <c:url /> used to solve these 2 points. It'd render a jsessionid appended to the url if needed (ie. sessionid doesn't come for a cookie) and it'll render good ol' <a href=""> tags that any robot would be able to understand and to follow, rather than these JavaScript submitted forms!
	And this is where I encounter what I think is a (actually two) weird behaviour of JSF's <h:outputLink /> tag is:
	It'll append the jsessionid only if it's value is a relative path... Giving an absolute path would discard this "feature". 
	There seems to be no way to include the app's context path to the url, in order to get a absolute path, which again, would result in problem #1! 
	I certainly do understand the whole thing about using these posted forms all the time, which is actually fine for the business logic of the app. But we'll always need to be able to program functionalities around the two requirements I mentionned earlier.
	I did not gave up yet, but this is really annoying me so far!
	Besides the "work around" I had to code to retrieve the brand id's from the param map in the managed-bean somehow bothers me too. Since I couldn't get an answer to the question: "Is JSF setting attributes in same order as specified in the config file?", and/or could we get to support init() on managed beans? This would enabling us to set properties (as id) and inject resources (as services) and then init() the bean and having it to set itselfs in the right state, being sure we have all the elements to do so...
	Well, I'll keep on going, but I found this JIRA entry on a project by the BeJUG here in Belgium, that really scares me! Did they give up on JSF?
	
	UPDATE:
	JSF is smart! It'll only discard jsessionid from the url if the target context isn't the same as the current one (which was the case in my tests, since I omitted it completely resulting in /products/, instead of /StoreFront/products/)! So here's how I finally solved the problem:
	Since JSF doesn't handle context path, I prepend every "absolute" path like that: 
	<jstl:forEach items="#{brandListBean.brands}" var="brand">
	<h:outpotLink value="#{facesContext.externalContext.requestContextPath}/products/viewBrand.faces">
	<f:param name="brandId" value="#{brand.id}" />
	<f:outputText value="#{brand.name}" />
	</h:ouputLink>
	</jstl:forEach>
	