package com.sonya.service;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.sun.jersey.api.core.ResourceConfig;
import com.sun.jersey.spi.container.WebApplication;
import com.sun.jersey.spi.container.servlet.ServletContainer;
import com.sun.jersey.spi.service.ComponentProvider;
import com.sun.jersey.spi.service.ComponentProvider$Scope;

/**
 * This class integrates with Spring and Jersey for the instantiation of root
 * resources.
 * 
 * @author YoungGue Bae
 */
public class RestSpringServlet extends ServletContainer {
	private static class SpringComponentProvider implements ComponentProvider {
		private ApplicationContext springContext;

		SpringComponentProvider(ApplicationContext springContext, Class c) {
			this.springContext = springContext;
		}

		private String getBeanName(Class c) {
			String names[] = springContext.getBeanNamesForType(c);
			if (names.length == 0) {
				return null;
			} else if (names.length > 1) {
				throw new RuntimeException("Multiple configured beans for "
						+ c.getName());
			}
			return names[0];
		}

		public Object getInstance(Scope scope, Class c)
				throws InstantiationException, IllegalAccessException {
			String beanName = getBeanName(c);
			if (beanName == null)
				return null;

			if (scope == Scope.WebApplication
					&& springContext.isSingleton(beanName)) {
				return springContext.getBean(beanName, c);
			} else if (scope == Scope.ApplicationDefined
					&& springContext.isPrototype(beanName)
					&& !springContext.isSingleton(beanName)) {
				return springContext.getBean(beanName, c);
			} else {
				return null;
			}
		}

		public Object getInstance(Scope scope, Constructor contructor,
				Object[] parameters) throws InstantiationException,
				IllegalArgumentException, IllegalAccessException,
				InvocationTargetException {
			return null;
		}

		public Object getInjectableInstance(Object instance) {
			return instance;
		}

		public void inject(Object instance) {
		}
	};

	@Override
	protected void initiate(ResourceConfig rc, WebApplication wa) {
		ApplicationContext springContext = WebApplicationContextUtils
				.getRequiredWebApplicationContext(getServletContext());

		wa.initiate(rc, new SpringComponentProvider(springContext));
	}
}
